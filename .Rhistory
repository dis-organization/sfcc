usethis::use_rcpp()
usethis::use_package_doc()
devtools::load_all(".")
remove.packages("Rcpp")
library(Rcpp)
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
library(sfcc)
library(sfcc)
library(sfcc)
library(sf)
library(sf)
library(sp)
N <- 1000000
df <- data.frame(lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
df_sf <- st_as_sf(df, coords = c("lng", "lat"), crs = "+proj=longlat +datum=WGS84")
ptvec <- structure(c(0, 0), class = c("XY", "POINT", "sfg"))
ptvecfun <- function(pt) {
ptvec[1:2] <- pt
ptvec
}
N <- 1e5
df <- data.frame(lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
system.time({
df_sf <- st_as_sf(df, coords = c("lng", "lat"), crs = "+proj=longlat +datum=WGS84")
})
ptvec <- structure(c(0, 0), class = c("XY", "POINT", "sfg"))
ptvecfun <- function(pt) {
ptvec[1:2] <- pt
ptvec
}
system.time({
l <- split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2))
lapply(l, ptvecfun)
})
length(l)
x <- sfcc::points_cpp(l)
system.time({
x <- sfcc::points_cpp(l)
})
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
system.time({
df_sf <- st_as_sf(df, coords = c("lng", "lat"), crs = "+proj=longlat +datum=WGS84")
})
ptvec <- structure(c(0, 0), class = c("XY", "POINT", "sfg"))
ptvecfun <- function(pt) {
ptvec[1:2] <- pt
ptvec
}
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
system.time({
df_sf <- st_as_sf(df, coords = c("lng", "lat"), crs = "+proj=longlat +datum=WGS84")
})
ptvec <- structure(c(0, 0), class = c("XY", "POINT", "sfg"))
ptvecfun <- function(pt) {
ptvec[1:2] <- pt
ptvec
}
system.time({
dt <- tibble::tibble(a = df$a)
dt[["geometry"]] <- st_sfc(
lapply(split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2)),
ptvecfun))
})
system.time({
x <- sfcc::points_cpp(l)
})
system.time({
dcc <- dt
dt[["geometry"]] <- st_sfc(sfcc::points_cpp(l))
})
dcc <- st_sfc(sfcc::points_cpp(l))
dcc <- sfcc::points_cpp(l)
dcc[1]
dcc[[1]]
str(dcc)
structure
library(sfcc)
library(sf)
library(sf)
library(sp)
N <- 1e6
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
dcc <- sfcc::points_cpp(cbind(df[["lng"]], df[["lat"]]))
dcc[1]
dcc[[1]]
dcc[[2]]
system.time({
dcc <- tibble::tibble(a = df$a)
dcc[["geometry"]] <- sfcc::points_cpp(cbind(df[["lng"]], df[["lat"]]))
})
ds <- st_sfc(dcc[["geometry"]])
attributes(ds)
g <- sfcc::points_cpp(cbind(df[["lng"]], df[["lat"]]))
class(g) <- c("sfc_POINT", "sfc")
attr(g, "precision")
attr(g, "precision") <- 0
st_bbox(st_point(1, 1))
st_bbox(st_point(c(1, 1)))
st_bbox(st_point(c(1, 1))) %>% str()
attr(g, "bbox") <- structure(c(xmin = min(df[["lng"]]), ymin = min(df[["lat"]]),
xmax = max(df[["lng"]]), ymax = max(df[["lat"]])),
class = "bbox")
attr(g, "crs") <- structure(list(proj4string = NA_character_, epsg = NA_integer), class = "crs")
attr(g, "crs") <- structure(list(proj4string = NA_character_, epsg = NA_integer_), class = "crs")
attr(g, "n_empty") <- 0
dcc[["geometry"]] <- g
system.time({
dcc <- tibble::tibble(a = df$a)
g <- sfcc::points_cpp(cbind(df[["lng"]], df[["lat"]]))
class(g) <- c("sfc_POINT", "sfc")
attr(g, "precision") <- 0
attr(g, "bbox") <- structure(c(xmin = min(df[["lng"]]), ymin = min(df[["lat"]]),
xmax = max(df[["lng"]]), ymax = max(df[["lat"]])),
class = "bbox")
attr(g, "crs") <- structure(list(proj4string = NA_character_, epsg = NA_integer_), class = "crs")
attr(g, "n_empty") <- 0
dcc[["geometry"]] <- g
})
st_sfc
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
N <- 1e5
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
system.time({
df_sf <- st_as_sf(df, coords = c("lng", "lat"), crs = "+proj=longlat +datum=WGS84")
})
library(sf)
system.time({
df_sf <- st_as_sf(df, coords = c("lng", "lat"), crs = "+proj=longlat +datum=WGS84")
})
ptvec <- structure(c(0, 0), class = c("XY", "POINT", "sfg"))
ptvecfun <- function(pt) {
ptvec[1:2] <- pt
ptvec
}
l <- split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2))
system.time({
l <- split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2))
dt <- tibble::tibble(a = df$a)
dt[["geometry"]] <- lapply(l, ptvecfun)
})
system.time({
l <- split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2))
dt <- tibble::tibble(a = df$a)
dt[["geometry"]] <- lapply(l, ptvecfun)
dt <- st_as_sf(df, crs = "+proj=longlat +datum=WGS84")
})
dt[["geometry"]] <- st_as_sfc(lapply(l, ptvecfun))
system.time({
l <- split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2))
dt <- tibble::tibble(a = df$a)
dt[["geometry"]] <- st_as_sfc(lapply(l, ptvecfun))
dt <- st_as_sf(df, crs = "+proj=longlat +datum=WGS84")
})
system.time({
l <- split(t(cbind(df[["lng"]], df[["lat"]])), rep(seq_len(nrow(df)), each = 2))
dt <- tibble::tibble(a = df$a)
dt[["geometry"]] <- st_as_sfc(lapply(l, ptvecfun))
dt <- st_as_sf(dt, crs = "+proj=longlat +datum=WGS84")
})
usethis::use_readme_rmd()
devtools::load_all(".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
N <- 1e6
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
m <- cbind(df$lng, df$lat)
library(rbenchmark)
library(sfcc)
benchmark(
sfcc_pt =  mk_sfc_POINT(m, crs = 4326),
sf_pt = st_as_sf(df, coords = c("lng", "lat"))
,replications = 2
)
N <- 1e5
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
m <- cbind(df$lng, df$lat)
library(rbenchmark)
library(sfcc)
benchmark(
sfcc_pt =  st_sf(geometry = mk_sfc_POINT(m, crs = 4326), a = df$a),
sf_pt = st_as_sf(df, coords = c("lng", "lat"))
,replications = 2
)
N <- 1e6
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
m <- cbind(df$lng, df$lat)
library(rbenchmark)
library(sfcc)
benchmark(
sfcc_pt =  st_sf(geometry = mk_sfc_POINT(m, crs = 4326), a = df$a),
sf_pt = st_as_sf(df, coords = c("lng", "lat"))
,replications = 2
)
setwd("~")
system("tar zxvf ncdf4_1.16.tar.gz")
## example data, a polygon layer and a grid of pixel values
## using raster as a prototype
library(sf)
example(st_read)
library(fasterize)
rr <- raster::raster(raster::extent(st_bbox(nc)[c(1, 3, 2, 4)]), nrows = 8, ncols = 16)
rr[] <- seq(raster::ncell(rr))
rr <- raster::disaggregate(rr, fact = 4, method = "")
apply_fun <- function(ras, sfd, funs) {
sfd$sfd_row <- seq_len(nrow(sfd))
groupraster <- fasterize::fasterize(sfd, ras, field = "sfd_row")
summ <- tibble::tibble(value = raster::values(rr),
sfd_row = raster::values(groupraster)) %>%
dplyr::filter(!is.na(sfd_row)) %>% dplyr::group_by(sfd_row) %>%
dplyr::summarize_all(funs)
## use temp copy rather than entire pipeline to maintain sf class
sfd %>% dplyr::inner_join(summ, "sfd_row") %>%
dplyr::arrange(sfd_row) %>% dplyr::select(-sfd_row)
}
## column "value" is the mean of the raster in each polygon
apply_fun(rr, nc, mean)
## we can name the funs, so it's more obvious "mean" and "sd"
ncgridsumm <- apply_fun(rr, nc, list(mean = mean, sd = sd))
## example data, a polygon layer and a grid of pixel values
## using raster as a prototype
library(sf)
example(st_read)
library(fasterize)
rr <- raster::raster(raster::extent(st_bbox(nc)[c(1, 3, 2, 4)]), nrows = 8, ncols = 16)
rr[] <- seq(raster::ncell(rr))
rr <- raster::disaggregate(rr, fact = 4, method = "")
apply_fun <- function(ras, sfd, funs) {
sfd$sfd_row <- seq_len(nrow(sfd))
groupraster <- fasterize::fasterize(sfd, ras, field = "sfd_row")
summ <- tibble::tibble(value = raster::values(ras),
sfd_row = raster::values(groupraster)) %>%
dplyr::filter(!is.na(sfd_row)) %>% dplyr::group_by(sfd_row) %>%
dplyr::summarize_all(funs)
## use temp copy rather than entire pipeline to maintain sf class
sfd %>% dplyr::inner_join(summ, "sfd_row") %>%
dplyr::arrange(sfd_row) %>% dplyr::select(-sfd_row)
}
## column "value" is the mean of the raster in each polygon
apply_fun(rr, nc, mean)
## we can name the funs, so it's more obvious "mean" and "sd"
ncgridsumm <- apply_fun(rr, nc, list(mean = mean, sd = sd))
plot(ncdgridsumm[c("mean", "sd")])
plot(ncgridsumm[c("mean", "sd")])
rbenchmark::benchmark(
as.list = as.list(as.data.frame(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m)))
)
m <- matrix(rnorm(300), ncol = 3)
rbenchmark::benchmark(
as.list = as.list(as.data.frame(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m)))
)
m <- matrix(rnorm(3000), ncol = 3)
rbenchmark::benchmark(
as.list = as.list(as.data.frame(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m)))
)
m <- matrix(rnorm(1e5), ncol = 3)
rbenchmark::benchmark(
as.list = as.list(as.data.frame(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m)))
)
m <- matrix(rnorm(3e5), ncol = 3)
rbenchmark::benchmark(
as.list = as.list(as.data.frame(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
replications = 2
)
rbenchmark::benchmark(
as.list = as.list(tibble::as_tibble(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
replications = 2
)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
replications = 2
)
str(factor(1))
attributes(factor(1))
predictable_factor <- function(n, every = 1) {
int <- seq.int(1, n/every)
structure(rep(int, each = every), class = "factor", levels = as.character(int))
}
predictable_factor(1:10)
?seq.int
predictable_factor(10)
predictable_factor(10, 2)
predictable_factor(10, 5)
predictable_factor(10, 5),
factor((1:10) %/% 5)
predictable_factor(10, 5),
factor(((1:10)-1) %/% 5)
benchmark(
predictable_factor(10, 5),
factor(((1:10)-1) %/% 5)
)
library(rbenchmark)
benchmark(
predictable_factor(10, 5),
factor(((1:10)-1) %/% 5)
)
benchmark(
predictable_factor(1e6, 5),
factor(((1:1e6)-1) %/% 5)
)
m <- matrix(rnorm(3e5), ncol = 3)
predictable_factor <- function(n, every = 1) {
stopifnot(length(n) ==1)
stopifnot(length(every) == 1)
int <- seq.int(1, n/every)
structure(rep(int, each = every), class = "factor", levels = as.character(int))
}
library(rbenchmark)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
pspl = split(t(m), predictable_factor(nrow(m), ncol(m)))
replications = 2
)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
pspl = split(t(m), predictable_factor(nrow(m), ncol(m))),
replications = 2
)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
split = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
pspl = split(t(m), predictable_factor(length(m), ncol(m))),
replications = 2
)
spli = split(t(m), rep(seq_len(nrow(m)), each = ncol(m)))
spli[1:3]
pspl[1:3]
pspl = split(t(m), predictable_factor(length(m), ncol(m)))
pspl[1:3]
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
spli = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
pspl = .Internal(split(t(m), predictable_factor(length(m), ncol(m)))),
replications = 2
)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
spli = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
pspl = .Internal(split(t(m), predictable_factor(length(m), ncol(m)))),
replications = 20
)
library(purrr)
df <- data.frame(x  = 1:10, y = rnorm(10))
pmap(df, list)
lapply(seq_len(nrow(m)), function(i) m[i, ])
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
spli = split(t(m), rep(seq_len(nrow(m)), each = ncol(m))),
pspl = .Internal(split(t(m), predictable_factor(length(m), ncol(m)))),
lap = lapply(seq_len(nrow(m)), function(i) m[i, ]),
replications = 20
)
tm <- t(m)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
spli = split(tm, rep(seq_len(nrow(m)), each = ncol(m))),
pspl = .Internal(split(tm, predictable_factor(length(m), ncol(m)))),
lap = lapply(seq_len(nrow(m)), function(i) tm[,i]),
replications = 20
)
lap = lapply(seq_len(nrow(m)), function(i) tm[,i])
lap[1:2]
devtools::load_all(".")
devtools::load_all(".")
fsplit
split(1:10)
fsplit(1:10)
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
devtools::load_all(".")
fsplit(1:10)
devtools::load_all(".")
fsplit(1:10)
fsplit(1:10, 2)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
spli = split(tm, rep(seq_len(nrow(m)), each = ncol(m))),
pspl = .Internal(split(tm, predictable_factor(length(m), ncol(m)))),
#lap = lapply(seq_len(nrow(m)), function(i) tm[,i]),
fsplit = fsplit(tm, ncol(m))
replications = 20
)
rbenchmark::benchmark(
#  as.list = as.list(tibble::as_tibble(t(m))),
spli = split(tm, rep(seq_len(nrow(m)), each = ncol(m))),
pspl = .Internal(split(tm, predictable_factor(length(m), ncol(m)))),
#lap = lapply(seq_len(nrow(m)), function(i) tm[,i]),
fsplit = fsplit(tm, ncol(m)),
replications = 20
)
data(package = "sf")
remove.packages("raster")
#library(sf)
#example(st_read)
nc <- readRDS("nc.rds")
x <- nc
add = F
getwd()
devtools::load_all(".")
points_cpp(cbind(rnorm(10), 1:10))
points_rcpp(cbind(rnorm(10), 1:10))
devtools::load_all(".")
tools::package_native_routine_registration_skeleton("../sfcc", "src/init.c",character_only = FALSE)
library(sfcc)
devtools::load_all(".")
points_rcpp(cbind(rnorm(10), 1:10))
N <- 1e6
df <- data.frame(a = sample(letters, N, replace = TRUE),
lng = runif(N, -120, -100),
lat = runif(N, 30, 48))
benchmark(points_rcpp(m))
library(benchmark)
library(rbenchmark)
benchmark(points_rcpp(m))
m <- cbind(df$lng, df$lat)
benchmark(points_rcpp(m))
benchmark(points_rcpp(m), replications = 2)
benchmark(points_rcpp(m), replications = 4)
<- t(m)
m <- t(m)
devtools::load_all(".")
dim(m)
benchmark(points_rcpp(m), replications = 4)
library(sf)
library(tidyverse)
rel <-
tibble(
key = 1:3,
geom = map2(1:3, c(2:3, 5), c) %>% map(st_point) %>% st_sfc()
) %>%
st_as_sf() %>%
st_buffer(0.8)
plot(rel)
